"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GelatoRelay = void 0;
const ethers_1 = require("ethers");
const library = __importStar(require("./lib"));
class GelatoRelay {
    constructor() {
        /**
         * @param {CallWithSyncFeeRequest} request - CallWithSyncFee request to be relayed by Gelato Executors
         * @param {RelayRequestOptions} [options] - Optional Relay configuration
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.callWithSyncFee = (request, options) => library.relayWithSyncFee(request, options);
        /**
         * @param {SponsoredCallRequest} request SponsoredCallRequest to be relayed by the Gelato Executors.
         * @param {string} sponsorApiKey Sponsor API key to be used for the call
         * @param {RelayRequestOptions} [options] Optional Relay configuration
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.sponsoredCall = (request, sponsorApiKey, options) => library.relayWithSponsoredCall(request, sponsorApiKey, options);
        /**
         * @param {SponsoredCallERC2771Request} request - SponsoredCallERC2771Request to be relayed by Gelato Executors
         * @param {ethers.providers.Web3Provider} provider - Web3Provider to sign the payload
         * @param {string} sponsorApiKey - Sponsor API key
         * @param {RelayRequestOptions} [options] - Optional Relay configuration
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.sponsoredCallERC2771 = (request, provider, sponsorApiKey, options) => library.relayWithSponsoredCallERC2771(request, provider, sponsorApiKey, options);
        /**
         * @param {number} chainId - Chain Id
         * @returns {Promise<boolean>} Boolean to demonstrate if Relay V2 is supported on the provided chain
         */
        this.isNetworkSupported = (chainId) => library.isNetworkSupported(chainId);
        /**
         * @returns {Promise<string[]>} List of networks where Relay V2 is supported
         */
        this.getSupportedNetworks = () => library.getSupportedNetworks();
        /**
         * @param {number} chainId - Chain Id
         * @returns {Promise<boolean>} Boolean to demonstrate if the oracle is active on the provided chain
         */
        this.isOracleActive = (chainId) => library.isOracleActive(chainId);
        /**
         * @returns {Promise<string[]>} List of chain ids where the Gelato Oracle is active
         */
        this.getGelatoOracles = () => library.getGelatoOracles();
        /**
         * @param {number} chainId - Chain Id
         * @returns {Promise<string[]>} List of all payment tokens on the provided chain
         *
         */
        this.getPaymentTokens = (chainId) => library.getPaymentTokens(chainId);
        /**
         * @param {number} chainId - Chain Id
         * @param {string} paymentToken - Payment Token
         * @param {BigNumber} gasLimit - Gas Limit
         * @param {boolean} isHighPriority - Priority Level
         * @param {BigNumber} [gasLimitL1=BigNumber.from(0)] - Gas Limit for Layer 1
         * @returns {Promise<BigNumber>} Estimated Fee
         *
         */
        this.getEstimatedFee = (chainId, paymentToken, gasLimit, isHighPriority, gasLimitL1 = ethers_1.BigNumber.from(0)) => library.getEstimatedFee(chainId, paymentToken, gasLimit, isHighPriority, gasLimitL1);
        /**
         * @param {string} taskId - Task Id
         * @returns {Promise<TransactionStatusResponse | undefined>} Transaction status of the task id
         *
         */
        this.getTaskStatus = (taskId) => library.getTaskStatus(taskId);
    }
}
exports.GelatoRelay = GelatoRelay;
