"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.relayWithSyncFee = void 0;
const axios_1 = __importDefault(require("axios"));
const constants_1 = require("../../constants");
const utils_1 = require("../../utils");
const network_1 = require("../network");
const relayWithSyncFee = (request, options) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    try {
        const isSupported = yield (0, network_1.isNetworkSupported)(Number(request.chainId));
        if (!isSupported) {
            throw new Error(`Chain id [${request.chainId}] is not supported`);
        }
        const response = yield axios_1.default.post(`${constants_1.GELATO_RELAY_URL}/relays/v2/call-with-sync-fee`, Object.assign(Object.assign(Object.assign({}, request), { isRelayContext: (_a = request.isRelayContext) !== null && _a !== void 0 ? _a : true }), options));
        return response.data;
    }
    catch (error) {
        throw new Error(`GelatoRelaySDK/relayWithSyncFee: Failed with error: ${(0, utils_1.getHttpErrorMessage)(error)}`);
    }
});
exports.relayWithSyncFee = relayWithSyncFee;
