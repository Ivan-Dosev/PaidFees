"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.relayWithSponsoredCallERC2771 = void 0;
// eslint-disable-next-line import/no-named-as-default
const ethers_1 = require("ethers");
const utils_1 = require("ethers/lib/utils");
const utils_2 = require("../../utils");
const network_1 = require("../network");
const types_1 = require("../types");
const types_2 = require("./types");
const relayWithSponsoredCallERC2771 = (request, provider, sponsorApiKey, options) => __awaiter(void 0, void 0, void 0, function* () {
    return yield sponsoredCallERC2771(request, provider, sponsorApiKey, options);
});
exports.relayWithSponsoredCallERC2771 = relayWithSponsoredCallERC2771;
const getPayloadToSign = (struct) => {
    const domain = (0, utils_2.getEIP712Domain)(struct.chainId);
    return {
        domain,
        types: Object.assign(Object.assign({}, types_2.EIP712_SPONSORED_CALL_ERC2771_TYPE_DATA), types_1.EIP712_DOMAIN_TYPE_DATA),
        primaryType: "SponsoredCallERC2771",
        message: struct,
    };
};
const mapRequestToStruct = (request, override) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    if (!override.userNonce && !request.userNonce) {
        throw new Error(`userNonce is not found in the request, nor fetched`);
    }
    if (!override.userDeadline && !request.userDeadline) {
        throw new Error(`userDeadline is not found in the request, nor fetched`);
    }
    return {
        userNonce: 
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        (_a = override.userNonce) !== null && _a !== void 0 ? _a : ethers_1.BigNumber.from(request.userNonce).toString(),
        userDeadline: 
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        (_b = override.userDeadline) !== null && _b !== void 0 ? _b : ethers_1.BigNumber.from(request.userDeadline).toString(),
        chainId: ethers_1.BigNumber.from(request.chainId).toString(),
        target: (0, utils_1.getAddress)(request.target),
        data: request.data,
        user: (0, utils_1.getAddress)(request.user),
    };
});
const sponsoredCallERC2771 = (request, provider, sponsorApiKey, options) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const isSupported = yield (0, network_1.isNetworkSupported)(Number(request.chainId));
        if (!isSupported) {
            throw new Error(`Chain id [${request.chainId}] is not supported`);
        }
        const parametersToOverride = yield (0, utils_2.populateOptionalUserParameters)(request, provider);
        const struct = yield mapRequestToStruct(request, parametersToOverride);
        const signature = yield (0, utils_2.signTypedDataV4)(provider, request.user, getPayloadToSign(struct));
        const postResponse = yield (0, utils_2.postSponsoredCall)(types_1.RelayCall.SponsoredCallERC2771, Object.assign(Object.assign(Object.assign({}, struct), options), { userSignature: signature, sponsorApiKey }));
        return postResponse;
    }
    catch (error) {
        const errorMessage = error.message;
        throw new Error(`GelatoRelaySDK/sponsoredCallERC2771: Failed with error: ${errorMessage}`);
    }
});
