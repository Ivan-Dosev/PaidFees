"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.postSponsoredCall = void 0;
const axios_1 = __importDefault(require("axios"));
const constants_1 = require("../constants");
const types_1 = require("../lib/types");
const getHttpErrorMessage_1 = require("./getHttpErrorMessage");
const postSponsoredCall = (relayCall, request) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        let path;
        switch (relayCall) {
            case types_1.RelayCall.Sponsored:
                path = `${constants_1.GELATO_RELAY_URL}/relays/v2/sponsored-call`;
                break;
            case types_1.RelayCall.SponsoredCallERC2771:
                path = `${constants_1.GELATO_RELAY_URL}/relays/v2/sponsored-call-erc2771`;
                break;
            default: {
                const _exhaustiveCheck = relayCall;
                return _exhaustiveCheck;
            }
        }
        return (yield axios_1.default.post(path, request)).data;
    }
    catch (error) {
        throw new Error((0, getHttpErrorMessage_1.getHttpErrorMessage)(error));
    }
});
exports.postSponsoredCall = postSponsoredCall;
