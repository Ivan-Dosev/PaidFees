import { RelayResponse } from "@gelatonetwork/relay-sdk";
import { BigNumberish, ethers } from "ethers";
import { ErrorTypes, GaslessWalletError } from "./errors";
import { TransactionData } from "./types";
export { ErrorTypes, GaslessWalletError };
type EoaProvider = ethers.providers.ExternalProvider | ethers.providers.JsonRpcFetchFunc;
export interface GaslessWalletConfig {
    apiKey?: string;
}
export declare class GaslessWallet {
    #private;
    /**
     * @param {EoaProvider} eoaProvider - The EOA Provider
     * @param {GaslessWalletConfig} config - The configuration for the Gasless Wallet
     *
     */
    constructor(eoaProvider: EoaProvider, config: GaslessWalletConfig);
    /**
     * Initiates the GaslessWallet, required before invoking the other methods
     *
     */
    init(): Promise<void>;
    /**
     * @returns {boolean} Whether the init function of the GaslessWallet was invoked or not
     *
     */
    isInitiated(): boolean;
    /**
     * @returns {string} The address of the GaslessWallet
     *
     */
    getAddress(): string;
    /**
     * @returns {Promise<boolean>} Whether the GaslessWallet has already been deployed or not
     *
     */
    isDeployed(): Promise<boolean>;
    /**
     * Populates the transaction data for relaying
     * @param {string} to - The target address
     * @param {string} data - The transaction data
     * @param {BigNumberish} [value] - Optional value for payable
     * @returns {Promise<TransactionData>} TransactionData
     *
     */
    populateSponsorTransaction(to: string, data: string, value?: BigNumberish): Promise<TransactionData>;
    /**
     * Relays the transaction with the provided data to the target address by using Gelato's 1Balance
     * @param {string} to - The target address
     * @param {string} data - The transaction data
     * @param {BigNumberish} [value] - Optional value for payable
     * @returns {Promise<RelayResponse>} Response object with taskId parameter
     *
     */
    sponsorTransaction(to: string, data: string, value?: BigNumberish): Promise<RelayResponse>;
    private _getExecTransactionData;
    private _getSignature;
    private _getSignTypedData;
    private _getNonce;
    private _getCreateProxyData;
    private _calculateSmartWalletAddress;
    private _getSafeInitializer;
}
