"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GaslessWallet_provider, _GaslessWallet_gelatoRelay, _GaslessWallet_address, _GaslessWallet_chainId, _GaslessWallet_apiKey, _GaslessWallet_isInitiated, _GaslessWallet_safeAddressBook, _GaslessWallet_gnosisSafeInterface, _GaslessWallet_gnosisSafeProxyFactoryInterface, _GaslessWallet_multiCallInterface;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GaslessWallet = exports.GaslessWalletError = exports.ErrorTypes = void 0;
const relay_sdk_1 = require("@gelatonetwork/relay-sdk");
const ethers_1 = require("ethers");
const constants_1 = require("./constants");
const types_1 = require("./contracts/types");
const errors_1 = require("./errors");
Object.defineProperty(exports, "ErrorTypes", { enumerable: true, get: function () { return errors_1.ErrorTypes; } });
Object.defineProperty(exports, "GaslessWalletError", { enumerable: true, get: function () { return errors_1.GaslessWalletError; } });
const types_2 = require("./types");
const utils_1 = require("./utils");
const utils_2 = require("./utils");
class GaslessWallet {
    /**
     * @param {EoaProvider} eoaProvider - The EOA Provider
     * @param {GaslessWalletConfig} config - The configuration for the Gasless Wallet
     *
     */
    constructor(eoaProvider, config) {
        _GaslessWallet_provider.set(this, void 0);
        _GaslessWallet_gelatoRelay.set(this, void 0);
        _GaslessWallet_address.set(this, void 0);
        _GaslessWallet_chainId.set(this, void 0);
        _GaslessWallet_apiKey.set(this, void 0);
        _GaslessWallet_isInitiated.set(this, false);
        _GaslessWallet_safeAddressBook.set(this, void 0);
        // Contract Interfaces
        _GaslessWallet_gnosisSafeInterface.set(this, types_1.GnosisSafe__factory.createInterface());
        _GaslessWallet_gnosisSafeProxyFactoryInterface.set(this, types_1.GnosisSafeProxyFactory__factory.createInterface());
        _GaslessWallet_multiCallInterface.set(this, types_1.MultiCall__factory.createInterface());
        this._getSignTypedData = (to, data, value, nonce) => {
            return {
                types: constants_1.EIP712_SAFE_TX_TYPES,
                domain: {
                    chainId: __classPrivateFieldGet(this, _GaslessWallet_chainId, "f"),
                    verifyingContract: __classPrivateFieldGet(this, _GaslessWallet_address, "f"),
                },
                primaryType: "SafeTx",
                message: {
                    to,
                    value: ethers_1.BigNumber.from(value).toString(),
                    data,
                    operation: types_2.OperationType.Call,
                    safeTxGas: ethers_1.BigNumber.from(0).toString(),
                    baseGas: ethers_1.BigNumber.from(0).toString(),
                    gasPrice: ethers_1.BigNumber.from(0).toString(),
                    gasToken: constants_1.ZERO_ADDRESS,
                    refundReceiver: constants_1.ZERO_ADDRESS,
                    nonce: ethers_1.BigNumber.from(nonce).toString(),
                },
            };
        };
        this._getNonce = () => __awaiter(this, void 0, void 0, function* () {
            return (yield this.isDeployed())
                ? (yield types_1.GnosisSafe__factory.connect(__classPrivateFieldGet(this, _GaslessWallet_address, "f"), __classPrivateFieldGet(this, _GaslessWallet_provider, "f")).nonce()).toNumber()
                : 0;
        });
        __classPrivateFieldSet(this, _GaslessWallet_gelatoRelay, new relay_sdk_1.GelatoRelay(), "f");
        __classPrivateFieldSet(this, _GaslessWallet_provider, new ethers_1.ethers.providers.Web3Provider(eoaProvider), "f");
        __classPrivateFieldSet(this, _GaslessWallet_apiKey, config.apiKey, "f");
    }
    /**
     * Initiates the GaslessWallet, required before invoking the other methods
     *
     */
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            __classPrivateFieldSet(this, _GaslessWallet_chainId, (yield __classPrivateFieldGet(this, _GaslessWallet_provider, "f").getNetwork()).chainId, "f");
            if (!__classPrivateFieldGet(this, _GaslessWallet_chainId, "f")) {
                throw new errors_1.GaslessWalletError(errors_1.ErrorTypes.WalletNotInitiated, `Chain Id is not found`);
            }
            const isNetworkSupported = yield __classPrivateFieldGet(this, _GaslessWallet_gelatoRelay, "f").isNetworkSupported(__classPrivateFieldGet(this, _GaslessWallet_chainId, "f"));
            if (!isNetworkSupported) {
                throw new errors_1.GaslessWalletError(errors_1.ErrorTypes.UnsupportedNetwork, `Chain Id [${__classPrivateFieldGet(this, _GaslessWallet_chainId, "f")}]`);
            }
            __classPrivateFieldSet(this, _GaslessWallet_safeAddressBook, (0, utils_2.getSafeContractAddresses)(__classPrivateFieldGet(this, _GaslessWallet_chainId, "f")), "f");
            __classPrivateFieldSet(this, _GaslessWallet_address, yield this._calculateSmartWalletAddress(), "f");
            if (!__classPrivateFieldGet(this, _GaslessWallet_address, "f")) {
                throw new errors_1.GaslessWalletError(errors_1.ErrorTypes.WalletNotInitiated, `Address could not be predicted`);
            }
            __classPrivateFieldSet(this, _GaslessWallet_isInitiated, true, "f");
        });
    }
    /**
     * @returns {boolean} Whether the init function of the GaslessWallet was invoked or not
     *
     */
    isInitiated() {
        return __classPrivateFieldGet(this, _GaslessWallet_isInitiated, "f");
    }
    /**
     * @returns {string} The address of the GaslessWallet
     *
     */
    getAddress() {
        if (!__classPrivateFieldGet(this, _GaslessWallet_address, "f")) {
            throw new errors_1.GaslessWalletError(errors_1.ErrorTypes.WalletNotInitiated);
        }
        return __classPrivateFieldGet(this, _GaslessWallet_address, "f");
    }
    /**
     * @returns {Promise<boolean>} Whether the GaslessWallet has already been deployed or not
     *
     */
    isDeployed() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isInitiated() || !__classPrivateFieldGet(this, _GaslessWallet_address, "f") || !__classPrivateFieldGet(this, _GaslessWallet_chainId, "f")) {
                throw new errors_1.GaslessWalletError(errors_1.ErrorTypes.WalletNotInitiated);
            }
            try {
                yield types_1.GnosisSafe__factory.connect(__classPrivateFieldGet(this, _GaslessWallet_address, "f"), __classPrivateFieldGet(this, _GaslessWallet_provider, "f")).deployed();
                return true;
            }
            catch (error) {
                return false;
            }
        });
    }
    /**
     * Populates the transaction data for relaying
     * @param {string} to - The target address
     * @param {string} data - The transaction data
     * @param {BigNumberish} [value] - Optional value for payable
     * @returns {Promise<TransactionData>} TransactionData
     *
     */
    populateSponsorTransaction(to, data, value = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isInitiated() || !__classPrivateFieldGet(this, _GaslessWallet_address, "f") || !__classPrivateFieldGet(this, _GaslessWallet_chainId, "f")) {
                throw new errors_1.GaslessWalletError(errors_1.ErrorTypes.WalletNotInitiated);
            }
            if (yield this.isDeployed()) {
                return {
                    chainId: __classPrivateFieldGet(this, _GaslessWallet_chainId, "f"),
                    target: __classPrivateFieldGet(this, _GaslessWallet_address, "f"),
                    data: yield this._getExecTransactionData(to, data, value),
                };
            }
            const calls = [
                {
                    target: __classPrivateFieldGet(this, _GaslessWallet_safeAddressBook, "f").gnosisSafeProxyFactory,
                    callData: yield this._getCreateProxyData(),
                },
                {
                    target: __classPrivateFieldGet(this, _GaslessWallet_address, "f"),
                    callData: yield this._getExecTransactionData(to, data, value),
                },
            ];
            const multiCallData = __classPrivateFieldGet(this, _GaslessWallet_multiCallInterface, "f").encodeFunctionData("aggregate", [calls]);
            return {
                chainId: __classPrivateFieldGet(this, _GaslessWallet_chainId, "f"),
                target: (0, utils_1.getMultiCallContractAddress)(__classPrivateFieldGet(this, _GaslessWallet_chainId, "f")),
                data: multiCallData,
            };
        });
    }
    /**
     * Relays the transaction with the provided data to the target address by using Gelato's 1Balance
     * @param {string} to - The target address
     * @param {string} data - The transaction data
     * @param {BigNumberish} [value] - Optional value for payable
     * @returns {Promise<RelayResponse>} Response object with taskId parameter
     *
     */
    sponsorTransaction(to, data, value = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!__classPrivateFieldGet(this, _GaslessWallet_apiKey, "f")) {
                throw new errors_1.GaslessWalletError(errors_1.ErrorTypes.ApiKeyNotProvided);
            }
            const { chainId, data: populatedData, target, } = yield this.populateSponsorTransaction(to, data, value);
            return yield __classPrivateFieldGet(this, _GaslessWallet_gelatoRelay, "f").sponsoredCall({
                chainId,
                target,
                data: populatedData,
            }, __classPrivateFieldGet(this, _GaslessWallet_apiKey, "f"));
        });
    }
    _getExecTransactionData(to, data, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const signature = yield this._getSignature(to, data, value);
            return __classPrivateFieldGet(this, _GaslessWallet_gnosisSafeInterface, "f").encodeFunctionData("execTransaction", [
                to,
                value,
                data,
                0,
                0,
                0,
                0,
                constants_1.ZERO_ADDRESS,
                constants_1.ZERO_ADDRESS,
                signature,
            ]);
        });
    }
    _getSignature(to, data, value) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield __classPrivateFieldGet(this, _GaslessWallet_provider, "f").send(constants_1.SIGNED_TYPE_DATA_METHOD, [
                yield __classPrivateFieldGet(this, _GaslessWallet_provider, "f").getSigner().getAddress(),
                JSON.stringify(this._getSignTypedData(to, data, value, yield this._getNonce())),
            ]);
        });
    }
    _getCreateProxyData() {
        return __awaiter(this, void 0, void 0, function* () {
            return __classPrivateFieldGet(this, _GaslessWallet_gnosisSafeProxyFactoryInterface, "f").encodeFunctionData("createProxyWithNonce", [
                __classPrivateFieldGet(this, _GaslessWallet_safeAddressBook, "f").gnosisSafe,
                yield this._getSafeInitializer(),
                ethers_1.BigNumber.from(constants_1.SALT),
            ]);
        });
    }
    _calculateSmartWalletAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            const deploymentCode = ethers_1.ethers.utils.solidityPack(["bytes", "uint256"], [
                yield types_1.GnosisSafeProxyFactory__factory.connect(__classPrivateFieldGet(this, _GaslessWallet_safeAddressBook, "f").gnosisSafeProxyFactory, __classPrivateFieldGet(this, _GaslessWallet_provider, "f")).proxyCreationCode(),
                __classPrivateFieldGet(this, _GaslessWallet_safeAddressBook, "f").gnosisSafe,
            ]);
            const salt = ethers_1.ethers.utils.solidityKeccak256(["bytes32", "uint256"], [
                ethers_1.ethers.utils.solidityKeccak256(["bytes"], [yield this._getSafeInitializer()]),
                constants_1.SALT,
            ]);
            return ethers_1.ethers.utils.getCreate2Address(__classPrivateFieldGet(this, _GaslessWallet_safeAddressBook, "f").gnosisSafeProxyFactory, salt, ethers_1.ethers.utils.keccak256(deploymentCode));
        });
    }
    _getSafeInitializer() {
        return __awaiter(this, void 0, void 0, function* () {
            const owner = yield __classPrivateFieldGet(this, _GaslessWallet_provider, "f").getSigner().getAddress();
            return __classPrivateFieldGet(this, _GaslessWallet_gnosisSafeInterface, "f").encodeFunctionData("setup", [
                [owner],
                ethers_1.BigNumber.from(1),
                constants_1.ZERO_ADDRESS,
                "0x",
                __classPrivateFieldGet(this, _GaslessWallet_safeAddressBook, "f").fallbackHandler,
                constants_1.ZERO_ADDRESS,
                ethers_1.BigNumber.from(0),
                constants_1.ZERO_ADDRESS,
            ]);
        });
    }
}
exports.GaslessWallet = GaslessWallet;
_GaslessWallet_provider = new WeakMap(), _GaslessWallet_gelatoRelay = new WeakMap(), _GaslessWallet_address = new WeakMap(), _GaslessWallet_chainId = new WeakMap(), _GaslessWallet_apiKey = new WeakMap(), _GaslessWallet_isInitiated = new WeakMap(), _GaslessWallet_safeAddressBook = new WeakMap(), _GaslessWallet_gnosisSafeInterface = new WeakMap(), _GaslessWallet_gnosisSafeProxyFactoryInterface = new WeakMap(), _GaslessWallet_multiCallInterface = new WeakMap();
